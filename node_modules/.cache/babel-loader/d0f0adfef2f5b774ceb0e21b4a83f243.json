{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { GET_USER } from '../Constants';\nimport { get_user_ret, get_user_loading } from '../actions/user';\nimport api from '../utils/api_routes';\nimport { get_url_params } from \"../utils/common_utilities\";\nimport store from '../store';\nconsole.log(store, \"store in saga file\"); // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* get_user_saga() {\n  console.log(\"Inside get_user_saga\");\n\n  try {\n    const data = yield store.getState().user_store.get_user;\n    const headers = {\n      headers: {\n        Authorization: `bearer ${localStorage.getItem('token')}`\n      }\n    };\n    const api_data = yield call(api.user.get_user, headers);\n    console.log(api_data, \"api_data in get_usersaga\");\n\n    if (!!api_data) {\n      if (api_data.success) {\n        yield put(get_user_ret({\n          success: true,\n          message: api_data.message || \"User successfully fetched\",\n          data: api_data.data\n        }));\n      } else {\n        yield put(get_user_ret({\n          success: false,\n          message: api_data.message || 'Something went wrong try again later..',\n          data: []\n        }));\n      }\n    }\n  } catch (e) {\n    console.log(e, \"e in get_act insigt saga\");\n\n    try {\n      yield put(get_user_ret({\n        success: false,\n        message: 'Something went wrong try again later..',\n        data: []\n      }));\n    } catch (x) {\n      yield put(get_user_loading({\n        success: false,\n        message: 'Something went wrong try again later..',\n        data: []\n      }));\n    }\n  }\n}\n\nexport const user_saga = [takeLatest(GET_USER, get_user_saga)];\nexport default user_saga;","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Sagas/user_saga.js"],"names":["call","put","takeEvery","takeLatest","GET_USER","get_user_ret","get_user_loading","api","get_url_params","store","console","log","get_user_saga","data","getState","user_store","get_user","headers","Authorization","localStorage","getItem","api_data","user","success","message","e","x","user_saga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAAUC,QAAV,QAA0B,cAA1B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,iBAA/C;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAkB,oBAAlB,E,CAEA;;AACA,UAAUG,aAAV,GAA0B;AACtBF,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AAED,MAAI;AACD,UAAOE,IAAI,GAAG,MAAMJ,KAAK,CAACK,QAAN,GAAiBC,UAAjB,CAA4BC,QAAhD;AACA,UAAMC,OAAO,GAAG;AACbA,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AADhD;AADI,KAAhB;AAKC,UAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACO,GAAG,CAACe,IAAJ,CAASN,QAAV,EAAqBC,OAArB,CAA3B;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ,EAAqB,0BAArB;;AACA,QAAG,CAAC,CAACA,QAAL,EAAc;AACX,UAAGA,QAAQ,CAACE,OAAZ,EAAoB;AACjB,cAAMtB,GAAG,CAACI,YAAY,CAAC;AACnBkB,UAAAA,OAAO,EAAC,IADW;AAEnBC,UAAAA,OAAO,EAACH,QAAQ,CAACG,OAAT,IAAoB,2BAFT;AAGnBX,UAAAA,IAAI,EAACQ,QAAQ,CAACR;AAHK,SAAD,CAAb,CAAT;AAKH,OANA,MAMI;AACD,cAAMZ,GAAG,CAACI,YAAY,CAAC;AACnBkB,UAAAA,OAAO,EAAC,KADW;AAEnBC,UAAAA,OAAO,EAACH,QAAQ,CAACG,OAAT,IAAmB,wCAFR;AAGnBX,UAAAA,IAAI,EAAC;AAHc,SAAD,CAAb,CAAT;AAKH;AACF;AACH,GAxBD,CAwBE,OAAOY,CAAP,EAAU;AACXf,IAAAA,OAAO,CAACC,GAAR,CAAYc,CAAZ,EAAc,0BAAd;;AACA,QAAG;AACC,YAAMxB,GAAG,CAACI,YAAY,CAAC;AACnBkB,QAAAA,OAAO,EAAC,KADW;AAEnBC,QAAAA,OAAO,EAAC,wCAFW;AAGnBX,QAAAA,IAAI,EAAC;AAHc,OAAD,CAAb,CAAT;AAKD,KANH,CAMG,OAAMa,CAAN,EAAQ;AACP,YAAMzB,GAAG,CAACK,gBAAgB,CAAC;AACvBiB,QAAAA,OAAO,EAAC,KADe;AAEvBC,QAAAA,OAAO,EAAC,wCAFe;AAGvBX,QAAAA,IAAI,EAAC;AAHkB,OAAD,CAAjB,CAAT;AAKC;AACL;AACH;;AAID,OAAO,MAAMc,SAAS,GAAG,CACtBxB,UAAU,CAACC,QAAD,EAAWQ,aAAX,CADY,CAAlB;AAIP,eAAee,SAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport {  GET_USER } from '../Constants'\nimport { get_user_ret, get_user_loading } from '../actions/user'\nimport api from '../utils/api_routes'\nimport { get_url_params } from \"../utils/common_utilities\"\nimport store from '../store'\n\nconsole.log(store,\"store in saga file\")\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* get_user_saga() {\n    console.log(\"Inside get_user_saga\")\n\n   try {\n      const  data = yield store.getState().user_store.get_user\n      const headers = {\n         headers: {\n           Authorization: `bearer ${localStorage.getItem('token')}`,\n         },\n       }\n       const api_data = yield call(api.user.get_user,  headers)\n      console.log(api_data,\"api_data in get_usersaga\")\n      if(!!api_data){\n         if(api_data.success){\n            yield put(get_user_ret({\n                success:true,\n                message:api_data.message || \"User successfully fetched\",\n                data:api_data.data\n               }))\n        }else{\n            yield put(get_user_ret({\n                success:false,\n                message:api_data.message ||'Something went wrong try again later..',\n                data:[]\n               }))\n        }\n      }\n   } catch (e) {\n    console.log(e,\"e in get_act insigt saga\")\n    try{\n        yield put(get_user_ret({\n            success:false,\n            message:'Something went wrong try again later..',\n            data:[]\n           }))\n      }catch(x){\n        yield put(get_user_loading({\n            success:false,\n            message:'Something went wrong try again later..',\n            data:[]\n           }))\n        }\n   }\n}\n\n\n\nexport const user_saga = [\n   takeLatest(GET_USER, get_user_saga)\n]\n\nexport default user_saga"]},"metadata":{},"sourceType":"module"}