{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Staking.js\";\nimport React from \"react\";\nimport LoginView from \"../Views/HomeView\";\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'; // import { ReCaptcha } from 'react-recaptcha-v3'\n\nimport Header from \"../Components/Header\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport StakingView from \"../Views/StakingView\";\nimport MetamaskContext from '../contexts/metamask';\n\nfunction Staking(props) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    ethereumAddress: metamaskContextValue.ethereumAddress,\n    handleConnectMetamask: props.handleConnectMetamask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(StakingView, {\n    global_error: props.global_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Notif, {\n    global_error: props.global_error,\n    global_error_ret: props.global_error_ret,\n    global_error_clr: props.global_error_clr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }\n  })));\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Staking);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Staking.js"],"names":["React","LoginView","login","login_loading","set_user_data","global_error","global_error_clr","connect","Notif","Header","Footer","StakingView","MetamaskContext","Staking","props","metamaskContextValue","useContext","ethereumAddress","handleConnectMetamask","global_error_ret","mapStateToProps","state","auth_store","login_ret","login_loading_flag","global_store"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,mBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAOC,eAAP,MAA4B,sBAA5B;;AACA,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAEnB,QAAMC,oBAAoB,GAAGf,KAAK,CAACgB,UAAN,CAAiBJ,eAAjB,CAA7B;AAEE,sBACK,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,MAAD;AAAQ,IAAA,eAAe,EAAEG,oBAAoB,CAACE,eAA9C;AAA+D,IAAA,qBAAqB,EAAEH,KAAK,CAACI,qBAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEE,oBAAC,WAAD;AAGE,IAAA,YAAY,EAAIJ,KAAK,CAACT,YAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPA,eAQE,oBAAC,KAAD;AACG,IAAA,YAAY,EAAIS,KAAK,CAACT,YADzB;AAEG,IAAA,gBAAgB,EAAIS,KAAK,CAACK,gBAF7B;AAGG,IAAA,gBAAgB,EAAIL,KAAK,CAACR,gBAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADH,CADL;AAkBP;;AAED,MAAMc,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,UAAU,EAAED,KAAK,CAACC,UADc;AAEhCC,EAAAA,SAAS,EAACF,KAAK,CAACC,UAAN,CAAiBC,SAFK;AAGhCC,EAAAA,kBAAkB,EAACH,KAAK,CAACC,UAAN,CAAiBnB,aAHJ;AAIhCgB,EAAAA,gBAAgB,EAACE,KAAK,CAACI,YAAN,CAAmBN;AAJJ,CAAL,CAA7B;;AAOA,eAAeZ,OAAO,CAACa,eAAD,EAAkB;AACtClB,EAAAA,KADsC;AAEtCC,EAAAA,aAFsC;AAGtCE,EAAAA,YAHsC;AAItCC,EAAAA,gBAJsC;AAKtCF,EAAAA;AALsC,CAAlB,CAAP,CAMXS,OANW,CAAf","sourcesContent":["import React from \"react\"\nimport LoginView from \"../Views/HomeView\"\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'\n// import { ReCaptcha } from 'react-recaptcha-v3'\nimport Header from \"../Components/Header\"\nimport Footer from \"../Components/Footer/Index.js\"\nimport StakingView from \"../Views/StakingView\"\n\nimport MetamaskContext from '../contexts/metamask';\nfunction Staking (props) {\n\n      const metamaskContextValue = React.useContext(MetamaskContext);\n\n        return (\n             <React.Fragment>\n                <div >\n                <Header ethereumAddress={metamaskContextValue.ethereumAddress} handleConnectMetamask={props.handleConnectMetamask}/>\n                  <StakingView\n\n\n                    global_error = {props.global_error}\n                  />\n                <Footer />\n                  <Notif\n                     global_error = {props.global_error}\n                     global_error_ret = {props.global_error_ret}\n                     global_error_clr = {props.global_error_clr}\n                  />\n                </div>\n             </React.Fragment>\n        )\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Staking)\n"]},"metadata":{},"sourceType":"module"}