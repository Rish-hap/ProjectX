{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/App.js\";\nimport React, { useEffect } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport './sass/main.scss';\nimport 'antd/dist/antd.css';\nimport Home from \"./Containers/Home\";\nimport Farming from \"./Containers/Farming\";\nimport Reward from \"./Containers/Reward\";\nimport Staking from \"./Containers/Staking\";\nimport { Route, Switch, Redirect, BrowserRouter as Router } from 'react-router-dom';\nimport Header from \"./Components/Header\";\nimport { contractDeployedNetwork } from './utils/config';\nimport { TIMEOUT, NOT_INSTALLED, LOCKED } from './metamask/constants';\nimport { MetamaskProvider } from './contexts/metamask';\n\nfunction App(props) {\n  const [metamaskContextValue, setMetamaskContextValue] = React.useState({\n    ethereumAddress: null,\n    superContractInstance: null,\n    megaContractInstance: null,\n    ultraContractInstance: null,\n    liquidityProviderTokenStakingContractInstance: null,\n    web3Instance: null,\n    metamaskError: null\n  });\n  const [networkError, setNetworkError] = React.useState(false);\n  const chainedWeb3 = window.ethereum;\n\n  if (chainedWeb3) {\n    chainedWeb3.on('networkChanged', networkId => {\n      console.log('networkChanged -> networkId -> ', networkId); // handle the new network\n\n      resetApp();\n      window.location.reload();\n    });\n    chainedWeb3.on('accountsChanged', account => {\n      console.log('accountsChanged -> account -> ', account); // handle the new account\n\n      resetApp();\n    });\n  }\n\n  const resetApp = async (metamaskError = null) => {\n    if (metamaskContextValue.web3Instance && metamaskContextValue.web3Instance.currentProvider && metamaskContextValue.web3Instance.currentProvider.close) {\n      await metamaskContextValue.web3Instance.currentProvider.close();\n    }\n\n    setMetamaskContextValue({\n      ethereumAddress: null,\n      superContractInstance: null,\n      megaContractInstance: null,\n      ultraContractInstance: null,\n      liquidityProviderTokenStakingContractInstance: null,\n      web3Instance: null,\n      metamaskError\n    });\n  };\n\n  const loadBlockChain = async () => {\n    const error = typeof window !== 'undefined' && Boolean(window.ethereum || window.web3);\n    error ? console.log('NO ERROR') : resetApp(NOT_INSTALLED);\n\n    try {\n      window.web3 = new window.Web3(window.ethereum);\n      await window.ethereum.enable();\n      const web3 = await new Web3(window.web3.currentProvider);\n      const network = await web3.eth.net.getNetworkType();\n      console.log('Network: ', network);\n\n      if (network === contractDeployedNetwork.toLowerCase()) {\n        console.log('web3: ', web3);\n        const accounts = await web3.eth.getAccounts(); // const contractSuper = new web3.eth.Contract(\n        //   superABI,\n        //   superContractAddress,\n        // );\n\n        setMetamaskContextValue({ ...metamaskContextValue,\n          ethereumAddress: accounts[0],\n          // superContractInstance: contractSuper,\n          // megaContractInstance: contractMega,\n          // ultraContractInstance: contractUltra,\n          // liquidityProviderTokenStakingContractInstance: contractLPTS,\n          web3Instance: web3\n        });\n        setNetworkError(false);\n      } else {\n        setNetworkError(true);\n        resetApp(`Please switch your metamask network to ${contractDeployedNetwork.toUpperCase()}`);\n      }\n    } catch (err) {\n      console.log('error catch: ', err);\n    }\n  };\n\n  const handleConnectMetamask = () => {\n    loadBlockChain();\n  }; // React.useEffect(() => {\n  //   handleConnectMetamask()\n  // }, []);\n\n\n  const authObject = () => {\n    return {\n      isAuthenticated: !!localStorage.getItem('token')\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MetamaskProvider, {\n    value: metamaskContextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    ethereumAddress: metamaskContextValue.ethereumAddress,\n    handleConnectMetamask: handleConnectMetamask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    exact: true,\n    from: \"/\",\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/home\",\n    component: () => /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 51\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/farming\",\n    component: () => /*#__PURE__*/React.createElement(Farming, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 53\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/reward\",\n    component: () => /*#__PURE__*/React.createElement(Reward, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 52\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/staking\",\n    component: () => /*#__PURE__*/React.createElement(Staking, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 53\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  })))));\n}\n\nconst mapStateToProps = state => ({\n  user: state\n});\n\nexport default App;","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/App.js"],"names":["React","useEffect","Web3","Home","Farming","Reward","Staking","Route","Switch","Redirect","BrowserRouter","Router","Header","contractDeployedNetwork","TIMEOUT","NOT_INSTALLED","LOCKED","MetamaskProvider","App","props","metamaskContextValue","setMetamaskContextValue","useState","ethereumAddress","superContractInstance","megaContractInstance","ultraContractInstance","liquidityProviderTokenStakingContractInstance","web3Instance","metamaskError","networkError","setNetworkError","chainedWeb3","window","ethereum","on","networkId","console","log","resetApp","location","reload","account","currentProvider","close","loadBlockChain","error","Boolean","web3","enable","network","eth","net","getNetworkType","toLowerCase","accounts","getAccounts","toUpperCase","err","handleConnectMetamask","authObject","isAuthenticated","localStorage","getItem","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Web3 from 'web3';\n\nimport './App.css';\nimport './sass/main.scss';\nimport 'antd/dist/antd.css';\nimport Home from \"./Containers/Home\"\nimport Farming from \"./Containers/Farming\"\nimport Reward from \"./Containers/Reward\"\nimport Staking from \"./Containers/Staking\"\nimport {  Route, Switch, Redirect,  BrowserRouter as Router } from 'react-router-dom'\nimport Header from \"./Components/Header\"\nimport {\n  contractDeployedNetwork\n} from './utils/config';\nimport { TIMEOUT, NOT_INSTALLED, LOCKED } from './metamask/constants';\n\nimport { MetamaskProvider } from './contexts/metamask';\n\nfunction App(props) {\n  const [metamaskContextValue, setMetamaskContextValue] = React.useState({\n    ethereumAddress: null,\n    superContractInstance: null,\n    megaContractInstance: null,\n    ultraContractInstance: null,\n    liquidityProviderTokenStakingContractInstance: null,\n    web3Instance: null,\n    metamaskError: null,\n  });\n\n  const [networkError, setNetworkError] = React.useState(false);\n  const chainedWeb3 = window.ethereum;\n\n  if (chainedWeb3) {\n    chainedWeb3.on('networkChanged', networkId => {\n      console.log('networkChanged -> networkId -> ', networkId);\n      // handle the new network\n      resetApp();\n      window.location.reload();\n    });\n\n    chainedWeb3.on('accountsChanged', account => {\n      console.log('accountsChanged -> account -> ', account);\n      // handle the new account\n      resetApp();\n    });\n  }\n\n  const resetApp = async (metamaskError = null) => {\n    if (\n      metamaskContextValue.web3Instance &&\n      metamaskContextValue.web3Instance.currentProvider &&\n      metamaskContextValue.web3Instance.currentProvider.close\n    ) {\n      await metamaskContextValue.web3Instance.currentProvider.close();\n    }\n    setMetamaskContextValue({\n      ethereumAddress: null,\n      superContractInstance: null,\n      megaContractInstance: null,\n      ultraContractInstance: null,\n      liquidityProviderTokenStakingContractInstance: null,\n      web3Instance: null,\n      metamaskError,\n    });\n  };\n\n  const loadBlockChain = async () => {\n    const error =\n      typeof window !== 'undefined' && Boolean(window.ethereum || window.web3);\n\n    error ? console.log('NO ERROR') : resetApp(NOT_INSTALLED);\n\n    try {\n      window.web3 = new window.Web3(window.ethereum);\n      await window.ethereum.enable();\n      const web3 = await new Web3(window.web3.currentProvider);\n      const network = await web3.eth.net.getNetworkType();\n      console.log('Network: ', network);\n\n      if (network === contractDeployedNetwork.toLowerCase()) {\n        console.log('web3: ', web3);\n        const accounts = await web3.eth.getAccounts();\n        // const contractSuper = new web3.eth.Contract(\n        //   superABI,\n        //   superContractAddress,\n        // );\n\n\n        setMetamaskContextValue({\n          ...metamaskContextValue,\n          ethereumAddress: accounts[0],\n          // superContractInstance: contractSuper,\n          // megaContractInstance: contractMega,\n          // ultraContractInstance: contractUltra,\n          // liquidityProviderTokenStakingContractInstance: contractLPTS,\n          web3Instance: web3,\n        });\n        setNetworkError(false);\n      } else {\n        setNetworkError(true);\n        resetApp(\n          `Please switch your metamask network to ${contractDeployedNetwork.toUpperCase()}`,\n        );\n      }\n    } catch (err) {\n      console.log('error catch: ', err);\n    }\n  };\n\n  const handleConnectMetamask = () => {\n    loadBlockChain();\n  };\n\n  // React.useEffect(() => {\n  //   handleConnectMetamask()\n  // }, []);\n\n\n  const authObject =()=> {\n    return {\n     isAuthenticated: !!localStorage.getItem('token')\n    }\n }\n  return (\n      <React.Fragment>\n        <MetamaskProvider value={metamaskContextValue}>\n\n         <Router>\n         <Header ethereumAddress={metamaskContextValue.ethereumAddress} handleConnectMetamask={handleConnectMetamask}/>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/home\" />\n            <Route  path =\"/home\" component={()=> <Home  />}/>\n            <Route  path =\"/farming\" component={()=><Farming  />}/>\n            <Route  path =\"/reward\" component={()=><Reward />}/>\n            <Route  path =\"/staking\" component={()=><Staking />}/>\n          </Switch>\n      </Router>\n      </MetamaskProvider>\n      </React.Fragment>\n  )\n\n}\n\nconst mapStateToProps = state => ({\n  user: state\n})\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}