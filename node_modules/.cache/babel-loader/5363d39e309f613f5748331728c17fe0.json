{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Home.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport Notif from '../Components/Notif';\nimport Header from \"../Components/Header\";\nimport HomeView from \"../Views/HomeView\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { contractDeployedNetwork } from '../utils/config';\nimport { TIMEOUT, NOT_INSTALLED, LOCKED } from '../metamask/constants';\nimport MetamaskContext from '../contexts/metamask';\n\nfunction Home(props) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n  const [networkError, setNetworkError] = React.useState(false);\n  const chainedWeb3 = window.ethereum;\n\n  if (chainedWeb3) {\n    chainedWeb3.on('networkChanged', networkId => {\n      console.log('networkChanged -> networkId -> ', networkId); // handle the new network\n\n      resetApp();\n      window.location.reload();\n    });\n    chainedWeb3.on('accountsChanged', account => {\n      console.log('accountsChanged -> account -> ', account); // handle the new account\n\n      resetApp();\n    });\n  }\n\n  const resetApp = async (metamaskError = null) => {\n    if (metamaskContextValue.web3Instance && metamaskContextValue.web3Instance.currentProvider && metamaskContextValue.web3Instance.currentProvider.close) {\n      await metamaskContextValue.web3Instance.currentProvider.close();\n    }\n\n    props.setMetamaskContextValue({\n      ethereumAddress: null,\n      superContractInstance: null,\n      megaContractInstance: null,\n      ultraContractInstance: null,\n      liquidityProviderTokenStakingContractInstance: null,\n      web3Instance: null,\n      metamaskError\n    });\n  };\n\n  const loadBlockChain = async () => {\n    const error = typeof window !== 'undefined' && Boolean(window.ethereum || window.web3);\n    error ? console.log('NO ERROR') : resetApp(NOT_INSTALLED);\n\n    try {\n      window.web3 = new window.Web3(window.ethereum);\n      await window.ethereum.enable();\n      const web3 = await new Web3(window.web3.currentProvider);\n      const network = await web3.eth.net.getNetworkType();\n      console.log('Network: ', network);\n\n      if (network === contractDeployedNetwork.toLowerCase()) {\n        console.log('web3: ', web3);\n        const accounts = await web3.eth.getAccounts(); // const contractSuper = new web3.eth.Contract(\n        //   superABI,\n        //   superContractAddress,\n        // );\n\n        props.setMetamaskContextValue({ ...metamaskContextValue,\n          ethereumAddress: accounts[0],\n          // superContractInstance: contractSuper,\n          // megaContractInstance: contractMega,\n          // ultraContractInstance: contractUltra,\n          // liquidityProviderTokenStakingContractInstance: contractLPTS,\n          web3Instance: web3\n        });\n        setNetworkError(false);\n      } else {\n        setNetworkError(true);\n        resetApp(`Please switch your metamask network to ${contractDeployedNetwork.toUpperCase()}`);\n      }\n    } catch (err) {\n      console.log('error catch: ', err);\n    }\n  };\n\n  const handleConnectMetamask = () => {\n    loadBlockChain();\n  };\n\n  React.useEffect(() => {\n    handleConnectMetamask();\n  }, []);\n\n  const authObject = () => {\n    return {\n      isAuthenticated: !!localStorage.getItem('token')\n    };\n  };\n\n  console.log(props, \"props in props\");\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    ethereumAddress: metamaskContextValue.ethereumAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(HomeView, {\n    global_error: props.global_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Notif, {\n    global_error: props.global_error,\n    global_error_ret: props.global_error_ret,\n    global_error_clr: props.global_error_clr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  })));\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n}); // const ShowTheLocationWithRouter = withRouter(Home);\n\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Home);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Home.js"],"names":["React","useEffect","connect","Web3","login","login_loading","set_user_data","global_error","global_error_clr","Notif","Header","HomeView","Footer","withRouter","compose","contractDeployedNetwork","TIMEOUT","NOT_INSTALLED","LOCKED","MetamaskContext","Home","props","metamaskContextValue","useContext","networkError","setNetworkError","useState","chainedWeb3","window","ethereum","on","networkId","console","log","resetApp","location","reload","account","metamaskError","web3Instance","currentProvider","close","setMetamaskContextValue","ethereumAddress","superContractInstance","megaContractInstance","ultraContractInstance","liquidityProviderTokenStakingContractInstance","loadBlockChain","error","Boolean","web3","enable","network","eth","net","getNetworkType","toLowerCase","accounts","getAccounts","toUpperCase","err","handleConnectMetamask","authObject","isAuthenticated","localStorage","getItem","global_error_ret","mapStateToProps","state","auth_store","login_ret","login_loading_flag","global_store"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport Web3 from 'web3';\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport Notif from '../Components/Notif'\nimport Header from \"../Components/Header\"\nimport HomeView from \"../Views/HomeView\"\nimport Footer from \"../Components/Footer/Index.js\"\nimport { withRouter } from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport {\n  contractDeployedNetwork\n} from '../utils/config';\nimport { TIMEOUT, NOT_INSTALLED, LOCKED } from '../metamask/constants';\n\nimport MetamaskContext from '../contexts/metamask';\n\nfunction Home(props) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n\n  const [networkError, setNetworkError] = React.useState(false);\n  const chainedWeb3 = window.ethereum;\n\n  if (chainedWeb3) {\n    chainedWeb3.on('networkChanged', networkId => {\n      console.log('networkChanged -> networkId -> ', networkId);\n      // handle the new network\n      resetApp();\n      window.location.reload();\n    });\n\n    chainedWeb3.on('accountsChanged', account => {\n      console.log('accountsChanged -> account -> ', account);\n      // handle the new account\n      resetApp();\n    });\n  }\n\n  const resetApp = async (metamaskError = null) => {\n    if (\n      metamaskContextValue.web3Instance &&\n      metamaskContextValue.web3Instance.currentProvider &&\n      metamaskContextValue.web3Instance.currentProvider.close\n    ) {\n      await metamaskContextValue.web3Instance.currentProvider.close();\n    }\n    props.setMetamaskContextValue({\n      ethereumAddress: null,\n      superContractInstance: null,\n      megaContractInstance: null,\n      ultraContractInstance: null,\n      liquidityProviderTokenStakingContractInstance: null,\n      web3Instance: null,\n      metamaskError,\n    });\n  };\n\n  const loadBlockChain = async () => {\n    const error =\n      typeof window !== 'undefined' && Boolean(window.ethereum || window.web3);\n\n    error ? console.log('NO ERROR') : resetApp(NOT_INSTALLED);\n\n    try {\n      window.web3 = new window.Web3(window.ethereum);\n      await window.ethereum.enable();\n      const web3 = await new Web3(window.web3.currentProvider);\n      const network = await web3.eth.net.getNetworkType();\n      console.log('Network: ', network);\n\n      if (network === contractDeployedNetwork.toLowerCase()) {\n        console.log('web3: ', web3);\n        const accounts = await web3.eth.getAccounts();\n        // const contractSuper = new web3.eth.Contract(\n        //   superABI,\n        //   superContractAddress,\n        // );\n\n\n        props.setMetamaskContextValue({\n          ...metamaskContextValue,\n          ethereumAddress: accounts[0],\n          // superContractInstance: contractSuper,\n          // megaContractInstance: contractMega,\n          // ultraContractInstance: contractUltra,\n          // liquidityProviderTokenStakingContractInstance: contractLPTS,\n          web3Instance: web3,\n        });\n        setNetworkError(false);\n      } else {\n        setNetworkError(true);\n        resetApp(\n          `Please switch your metamask network to ${contractDeployedNetwork.toUpperCase()}`,\n        );\n      }\n    } catch (err) {\n      console.log('error catch: ', err);\n    }\n  };\n\n  const handleConnectMetamask = () => {\n    loadBlockChain();\n  };\n\n  React.useEffect(() => {\n    handleConnectMetamask()\n  }, []);\n  const authObject =()=> {\n    return {\n     isAuthenticated: !!localStorage.getItem('token')\n    }\n }\n\n\n console.log(props,\"props in props\")\n\n  return (\n    <React.Fragment>\n    <div >\n    <Header ethereumAddress={metamaskContextValue.ethereumAddress} />\n      <HomeView\n\n        global_error = {props.global_error}\n      />\n      <Footer />\n      <Notif\n         global_error = {props.global_error}\n         global_error_ret = {props.global_error_ret}\n         global_error_clr = {props.global_error_clr}\n      />\n    </div>\n </React.Fragment>\n  );\n}\n\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\n// const ShowTheLocationWithRouter = withRouter(Home);\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Home)"]},"metadata":{},"sourceType":"module"}