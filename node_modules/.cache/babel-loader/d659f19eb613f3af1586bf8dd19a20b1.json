{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js\";\nimport React from \"react\";\nimport LoginView from \"../Views/HomeView\";\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'; // import { ReCaptcha } from 'react-recaptcha-v3'\n\nimport FarmingView from \"../Views/FarmingView\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport MetamaskContext from '../contexts/metamask';\nimport { fessContractAddress, fnirContractAddress } from '../utils/config';\n\nfunction Farming(props) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n  const [userApprove, setUserApprove] = React.useState(0);\n  const [allowance, setAllowance] = React.useState(0);\n\n  const getAllowance = async () => {\n    try {\n      const allowanceValue = await metamaskContextValue.fessContractInstance.methods.allowance(metamaskContextValue.ethereumAddress, fessContractAddress).call();\n      setAllowance((Number(allowanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n    } catch (err) {\n      console.log('Staking -> getAllowance: err: ', err);\n    }\n  };\n\n  const handleApprove = async () => {\n    if (Number(userApprove) > 0) {\n      try {\n        const approveRequest = await metamaskContextValue.fessContractInstance.methods.approve(fnirContractAddress, metamaskContextValue.web3Instance.utils.toWei(String(userApprove), 'ether')).send({\n          from: metamaskContextValue.ethereumAddress,\n          to: fessContractAddress\n        });\n        console.log('approveRequest: ', approveRequest);\n        getAllowance();\n      } catch (err) {\n        console.log('Farming -> handleApprove: err: ', err);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    getAllowance();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FarmingView, {\n    userApprove: userApprove,\n    setUserApprove: setUserApprove,\n    handleApprove: handleApprove,\n    allowance: allowance,\n    global_error: props.global_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Notif, {\n    global_error: props.global_error,\n    global_error_ret: props.global_error_ret,\n    global_error_clr: props.global_error_clr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  })));\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Farming);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js"],"names":["React","LoginView","login","login_loading","set_user_data","global_error","global_error_clr","connect","Notif","FarmingView","Footer","MetamaskContext","fessContractAddress","fnirContractAddress","Farming","props","metamaskContextValue","useContext","userApprove","setUserApprove","useState","allowance","setAllowance","getAllowance","allowanceValue","fessContractInstance","methods","ethereumAddress","call","Number","Math","pow","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","err","console","log","handleApprove","approveRequest","approve","web3Instance","utils","toWei","String","send","from","to","useEffect","global_error_ret","mapStateToProps","state","auth_store","login_ret","login_loading_flag","global_store"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport LoginView from \"../Views/HomeView\"\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'\n// import { ReCaptcha } from 'react-recaptcha-v3'\nimport FarmingView from \"../Views/FarmingView\"\nimport Footer from \"../Components/Footer/Index.js\"\n\nimport MetamaskContext from '../contexts/metamask';\n\nimport {\n  fessContractAddress,\n  fnirContractAddress\n} from '../utils/config';\n\nfunction Farming (props){\n      const metamaskContextValue = React.useContext(MetamaskContext);\n\n      const [userApprove, setUserApprove] = React.useState(0);\n\n      const [allowance, setAllowance] = React.useState(0);\n\n      const getAllowance = async () => {\n        try {\n          const allowanceValue = await metamaskContextValue.fessContractInstance.methods\n            .allowance(\n              metamaskContextValue.ethereumAddress,\n              fessContractAddress,\n            )\n            .call();\n\n            setAllowance((\n              Number(allowanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n        } catch (err) {\n          console.log('Staking -> getAllowance: err: ', err);\n        }\n      }\n\n      const handleApprove = async() => {\n        if (Number(userApprove) > 0) {\n          try {\n          const approveRequest = await metamaskContextValue.fessContractInstance.methods\n          .approve(\n            fnirContractAddress,\n            metamaskContextValue.web3Instance.utils.toWei(\n              String(userApprove),\n              'ether',\n            ),\n          )\n          .send({\n            from: metamaskContextValue.ethereumAddress,\n            to: fessContractAddress,\n          });\n\n          console.log('approveRequest: ', approveRequest)\n\n          getAllowance();\n        } catch (err) {\n          console.log('Farming -> handleApprove: err: ', err);\n        }\n        }\n      }\n\n      React.useEffect(() => {\n        getAllowance();\n      }, [])\n\n\n        return (\n             <React.Fragment>\n                <div >\n                <FarmingView\n                    userApprove={userApprove}\n                    setUserApprove={setUserApprove}\n                    handleApprove={handleApprove}\n                    allowance={allowance}\n                    global_error = {props.global_error}\n                  />\n               <Footer />\n                  <Notif\n                     global_error = {props.global_error}\n                     global_error_ret = {props.global_error_ret}\n                     global_error_clr = {props.global_error_clr}\n                  />\n                </div>\n             </React.Fragment>\n        )\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Farming)"]},"metadata":{},"sourceType":"module"}