{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js\";\nimport React from \"react\";\nimport LoginView from \"../Views/HomeView\";\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'; // import { ReCaptcha } from 'react-recaptcha-v3'\n\nimport FarmingView from \"../Views/FarmingView\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport MetamaskContext from '../contexts/metamask';\nimport { fessContractAddress, fnirContractAddress } from '../utils/config';\n\nfunction Farming({\n  fnirBalance,\n  getFnirBalance\n}) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n  const [userApprove, setUserApprove] = React.useState(0);\n  const [allowance, setAllowance] = React.useState(0);\n  const [userSwap, setUserSwap] = React.useState(0);\n  const [fessBalance, setFessBalance] = React.useState(0);\n\n  const getAllowance = async () => {\n    try {\n      const allowanceValue = await metamaskContextValue.fessContractInstance.methods.allowance(metamaskContextValue.ethereumAddress, fnirContractAddress).call();\n      setAllowance((Number(allowanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n      setUserSwap((Number(allowanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n    } catch (err) {\n      console.log('Farming -> getAllowance: err: ', err);\n    }\n  };\n\n  const getFessBalance = async () => {\n    try {\n      const fessBalanceValue = await metamaskContextValue.fessContractInstance.methods.balanceOf(metamaskContextValue.ethereumAddress).call();\n      setFessBalance((Number(fessBalanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n      console.log('fessBalanceValue: ', fessBalanceValue);\n    } catch (err) {\n      console.log('Farming -> getFessBalance: err: ', err);\n    }\n  };\n\n  const handleApprove = async () => {\n    if (Number(userApprove) > 0) {\n      try {\n        const approveRequest = await metamaskContextValue.fessContractInstance.methods.approve(fnirContractAddress, metamaskContextValue.web3Instance.utils.toWei(String(userApprove), 'ether')).send({\n          from: metamaskContextValue.ethereumAddress,\n          to: fessContractAddress\n        });\n        console.log('approveRequest: ', approveRequest);\n        getAllowance();\n        getFessBalance();\n        getFnirBalance();\n      } catch (err) {\n        console.log('Farming -> handleApprove: err: ', err);\n      }\n    }\n  };\n\n  const handleSwap = async () => {\n    if (Number(allowance) > 0 && Number(userSwap) > 0 && Number(allowance) >= Number(userSwap)) {\n      try {\n        const swapRequest = await metamaskContextValue.fnirContractInstance.methods.swapTokens(metamaskContextValue.web3Instance.utils.toWei(String(userSwap), 'ether')).send({\n          value: metamaskContextValue.web3Instance.utils.toWei(String(0.1), 'ether'),\n          from: metamaskContextValue.ethereumAddress,\n          to: fnirContractAddress\n        });\n        console.log('swapRequest: ', swapRequest);\n        getAllowance();\n        getFessBalance();\n        getFnirBalance();\n      } catch (err) {\n        console.log('Farming -> handleSwap: err: ', err);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (metamaskContextValue.fessContractInstance && metamaskContextValue.fnirContractInstance) {\n      getAllowance();\n      getFessBalance();\n      getFnirBalance();\n    }\n  }, [metamaskContextValue.fessContractInstance, metamaskContextValue.fnirContractInstance]);\n  console.log('allowance: ', allowance);\n  console.log('fessBalance: ', fessBalance);\n  console.log('fnirBalance: ', fnirBalance);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FarmingView, {\n    userApprove: userApprove,\n    setUserApprove: setUserApprove,\n    handleApprove: handleApprove,\n    allowance: allowance,\n    fessBalance: fessBalance,\n    fnirBalance: fnirBalance,\n    userSwap: userSwap,\n    setUserSwap: setUserSwap,\n    handleSwap: handleSwap // global_error = {props.global_error}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }\n  })));\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Farming);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js"],"names":["React","LoginView","login","login_loading","set_user_data","global_error","global_error_clr","connect","Notif","FarmingView","Footer","MetamaskContext","fessContractAddress","fnirContractAddress","Farming","fnirBalance","getFnirBalance","metamaskContextValue","useContext","userApprove","setUserApprove","useState","allowance","setAllowance","userSwap","setUserSwap","fessBalance","setFessBalance","getAllowance","allowanceValue","fessContractInstance","methods","ethereumAddress","call","Number","Math","pow","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","err","console","log","getFessBalance","fessBalanceValue","balanceOf","handleApprove","approveRequest","approve","web3Instance","utils","toWei","String","send","from","to","handleSwap","swapRequest","fnirContractInstance","swapTokens","value","useEffect","mapStateToProps","state","auth_store","login_ret","login_loading_flag","global_error_ret","global_store"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport LoginView from \"../Views/HomeView\"\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'\n// import { ReCaptcha } from 'react-recaptcha-v3'\nimport FarmingView from \"../Views/FarmingView\"\nimport Footer from \"../Components/Footer/Index.js\"\n\nimport MetamaskContext from '../contexts/metamask';\n\nimport {\n  fessContractAddress,\n  fnirContractAddress\n} from '../utils/config';\n\nfunction Farming ({fnirBalance, getFnirBalance }){\n      const metamaskContextValue = React.useContext(MetamaskContext);\n\n      const [userApprove, setUserApprove] = React.useState(0);\n\n      const [allowance, setAllowance] = React.useState(0);\n\n      const [userSwap, setUserSwap] = React.useState(0);\n\n      const [fessBalance, setFessBalance] = React.useState(0);\n\n\n\n      const getAllowance = async () => {\n        try {\n          const allowanceValue = await metamaskContextValue.fessContractInstance.methods\n            .allowance(\n              metamaskContextValue.ethereumAddress,\n              fnirContractAddress,\n            )\n            .call();\n\n            setAllowance((\n              Number(allowanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n\n            setUserSwap((\n              Number(allowanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n        } catch (err) {\n          console.log('Farming -> getAllowance: err: ', err);\n        }\n      }\n\n      const getFessBalance = async () => {\n        try {\n          const fessBalanceValue = await metamaskContextValue.fessContractInstance.methods\n            .balanceOf(\n              metamaskContextValue.ethereumAddress\n            )\n            .call();\n\n            setFessBalance((\n              Number(fessBalanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n\n            console.log('fessBalanceValue: ', fessBalanceValue)\n        } catch (err) {\n          console.log('Farming -> getFessBalance: err: ', err);\n        }\n      }\n\n\n      const handleApprove = async() => {\n        if (Number(userApprove) > 0) {\n          try {\n          const approveRequest = await metamaskContextValue.fessContractInstance.methods\n          .approve(\n            fnirContractAddress,\n            metamaskContextValue.web3Instance.utils.toWei(\n              String(userApprove),\n              'ether',\n            ),\n          )\n          .send({\n            from: metamaskContextValue.ethereumAddress,\n            to: fessContractAddress,\n          });\n\n          console.log('approveRequest: ', approveRequest)\n\n          getAllowance();\n          getFessBalance();\n        getFnirBalance();\n        } catch (err) {\n          console.log('Farming -> handleApprove: err: ', err);\n        }\n        }\n      }\n\n      const handleSwap = async() => {\n        if (Number(allowance) > 0 && Number(userSwap) > 0  && Number(allowance) >= Number(userSwap)) {\n          try {\n          const swapRequest = await metamaskContextValue.fnirContractInstance.methods\n          .swapTokens(\n            metamaskContextValue.web3Instance.utils.toWei(\n              String(userSwap),\n              'ether',\n            ),\n          )\n          .send({\n            value:  metamaskContextValue.web3Instance.utils.toWei(\n              String(0.1),\n              'ether',\n            ),\n            from: metamaskContextValue.ethereumAddress,\n            to: fnirContractAddress,\n          });\n\n          console.log('swapRequest: ', swapRequest)\n\n          getAllowance();\n          getFessBalance();\n          getFnirBalance();\n        } catch (err) {\n          console.log('Farming -> handleSwap: err: ', err);\n        }\n        }\n\n      }\n\n      React.useEffect(() => {\n        if (\n          metamaskContextValue.fessContractInstance &&\n          metamaskContextValue.fnirContractInstance\n        ) {\n        getAllowance();\n        getFessBalance();\n        getFnirBalance();\n        }\n      }, [metamaskContextValue.fessContractInstance,\n        metamaskContextValue.fnirContractInstance])\n\n\n      console.log('allowance: ', allowance)\n      console.log('fessBalance: ', fessBalance)\n      console.log('fnirBalance: ', fnirBalance)\n\n        return (\n             <React.Fragment>\n                <div >\n                <FarmingView\n                    userApprove={userApprove}\n                    setUserApprove={setUserApprove}\n                    handleApprove={handleApprove}\n                    allowance={allowance}\n                    fessBalance={fessBalance}\n                    fnirBalance={fnirBalance}\n                    userSwap={userSwap}\n                    setUserSwap={setUserSwap}\n                    handleSwap={handleSwap}\n                    // global_error = {props.global_error}\n                  />\n               <Footer />\n                  {/* <Notif\n                     global_error = {props.global_error}\n                     global_error_ret = {props.global_error_ret}\n                     global_error_clr = {props.global_error_clr}\n                  /> */}\n                </div>\n             </React.Fragment>\n        )\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Farming)"]},"metadata":{},"sourceType":"module"}