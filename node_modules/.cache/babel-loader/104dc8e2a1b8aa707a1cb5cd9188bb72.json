{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js\";\nimport React from \"react\";\nimport LoginView from \"../Views/HomeView\";\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'; // import { ReCaptcha } from 'react-recaptcha-v3'\n\nimport FarmingView from \"../Views/FarmingView\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport MetamaskContext from '../contexts/metamask';\nimport { fessContractAddress, fnirContractAddress, liquidityContractAddress } from '../utils/config';\n\nfunction Farming({\n  fnirBalance,\n  getFnirBalance,\n  getFessBalance,\n  fessBalance\n}) {\n  const metamaskContextValue = React.useContext(MetamaskContext);\n  const [userApprove, setUserApprove] = React.useState(0);\n  const [allowance, setAllowance] = React.useState(0);\n  const [userSwap, setUserSwap] = React.useState(0);\n  const [referredEthereum, setReferredEthereum] = React.useState(\"0x0000000000000000000000000000000000000000\");\n\n  const getAllowance = async () => {\n    try {\n      const allowanceValue = await metamaskContextValue.fessContractInstance.methods.allowance(metamaskContextValue.ethereumAddress, liquidityContractAddress).call();\n      setAllowance((Number(allowanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n      setUserSwap((Number(allowanceValue) / Math.pow(10, 18)).toLocaleString(undefined, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n      }));\n    } catch (err) {\n      console.log('Farming -> getAllowance: err: ', err);\n    }\n  };\n\n  const handleApprove = async () => {\n    if (Number(userApprove) > 0) {\n      try {\n        const approveRequest = await metamaskContextValue.fessContractInstance.methods.approve(liquidityContractAddress, metamaskContextValue.web3Instance.utils.toWei(String(userApprove), 'ether')).send({\n          from: metamaskContextValue.ethereumAddress,\n          to: fessContractAddress\n        });\n        console.log('approveRequest: ', approveRequest);\n        getAllowance();\n        getFessBalance();\n        getFnirBalance();\n      } catch (err) {\n        console.log('Farming -> handleApprove: err: ', err);\n      }\n    }\n  };\n\n  const handleSwap = async () => {\n    console.log('handleSwap: allowance: ', parseFloat(allowance.replace(/[^0-9-.]/g, '')));\n    console.log('handleSwap: userSwap: ', Number(userSwap));\n    console.log('allowance >= userSwap: ', parseFloat(allowance.replace(/[^0-9-.]/g, '')) >= Number(userSwap));\n\n    if (parseFloat(allowance.replace(/[^0-9-.]/g, '')) > 0 && Number(userSwap) > 0 && parseFloat(allowance.replace(/[^0-9-.]/g, '')) >= Number(userSwap)) {\n      try {\n        console.log('handleSwap is called successfully');\n        const swapRequest = await metamaskContextValue.liquidityContractInstance.methods.swapFessTokens(metamaskContextValue.web3Instance.utils.toWei(String(userSwap), 'ether'), referredEthereum).send({\n          value: metamaskContextValue.web3Instance.utils.toWei(String(0.51), 'ether'),\n          from: metamaskContextValue.ethereumAddress,\n          to: liquidityContractAddress\n        });\n        console.log('swapRequest: ', swapRequest);\n        getAllowance();\n        getFessBalance();\n        getFnirBalance();\n      } catch (err) {\n        console.log('Farming -> handleSwap: err: ', err);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (metamaskContextValue.fessContractInstance && metamaskContextValue.fnirContractInstance && metamaskContextValue.liquidityContractInstance) {\n      getAllowance();\n      getFessBalance();\n      getFnirBalance();\n    }\n  }, [metamaskContextValue.fessContractInstance, metamaskContextValue.fnirContractInstance, metamaskContextValue.liquidityContractInstance]);\n  console.log('allowance: ', allowance);\n  console.log('fessBalance: ', fessBalance);\n  console.log('fnirBalance: ', fnirBalance);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FarmingView, {\n    ethereumAddress: metamaskContextValue.ethereumAddress,\n    userApprove: userApprove,\n    setUserApprove: setUserApprove,\n    handleApprove: handleApprove,\n    allowance: allowance,\n    fessBalance: fessBalance,\n    fnirBalance: fnirBalance,\n    userSwap: userSwap,\n    setUserSwap: setUserSwap,\n    referredEthereum: referredEthereum,\n    setReferredEthereum: setReferredEthereum,\n    handleSwap: handleSwap // global_error = {props.global_error}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 16\n    }\n  })));\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Farming);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js"],"names":["React","LoginView","login","login_loading","set_user_data","global_error","global_error_clr","connect","Notif","FarmingView","Footer","MetamaskContext","fessContractAddress","fnirContractAddress","liquidityContractAddress","Farming","fnirBalance","getFnirBalance","getFessBalance","fessBalance","metamaskContextValue","useContext","userApprove","setUserApprove","useState","allowance","setAllowance","userSwap","setUserSwap","referredEthereum","setReferredEthereum","getAllowance","allowanceValue","fessContractInstance","methods","ethereumAddress","call","Number","Math","pow","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","err","console","log","handleApprove","approveRequest","approve","web3Instance","utils","toWei","String","send","from","to","handleSwap","parseFloat","replace","swapRequest","liquidityContractInstance","swapFessTokens","value","useEffect","fnirContractInstance","mapStateToProps","state","auth_store","login_ret","login_loading_flag","global_error_ret","global_store"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,mBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,wBAHF,QAIO,iBAJP;;AAMA,SAASC,OAAT,CAAkB;AAACC,EAAAA,WAAD;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA,cAA9B;AAA8CC,EAAAA;AAA9C,CAAlB,EAA+E;AACzE,QAAMC,oBAAoB,GAAGpB,KAAK,CAACqB,UAAN,CAAiBV,eAAjB,CAA7B;AAEA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCvB,KAAK,CAACwB,QAAN,CAAe,CAAf,CAAtC;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1B,KAAK,CAACwB,QAAN,CAAe,CAAf,CAAlC;AAEA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B5B,KAAK,CAACwB,QAAN,CAAe,CAAf,CAAhC;AAEA,QAAM,CAACK,gBAAD,EAAmBC,mBAAnB,IAA0C9B,KAAK,CAACwB,QAAN,CAAe,4CAAf,CAAhD;;AAEA,QAAMO,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,cAAc,GAAG,MAAMZ,oBAAoB,CAACa,oBAArB,CAA0CC,OAA1C,CAC1BT,SAD0B,CAEzBL,oBAAoB,CAACe,eAFI,EAGzBrB,wBAHyB,EAK1BsB,IAL0B,EAA7B;AAOEV,MAAAA,YAAY,CAAC,CACXW,MAAM,CAACL,cAAD,CAAN,GAAyBM,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CADd,EAEXC,cAFW,CAEIC,SAFJ,EAEe;AAC1BC,QAAAA,qBAAqB,EAAE,CADG;AAE1BC,QAAAA,qBAAqB,EAAE;AAFG,OAFf,CAAD,CAAZ;AAOAf,MAAAA,WAAW,CAAC,CACVS,MAAM,CAACL,cAAD,CAAN,GAAyBM,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CADf,EAEVC,cAFU,CAEKC,SAFL,EAEgB;AAC1BC,QAAAA,qBAAqB,EAAE,CADG;AAE1BC,QAAAA,qBAAqB,EAAE;AAFG,OAFhB,CAAD,CAAX;AAMH,KArBD,CAqBE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,GAA9C;AACD;AACF,GAzBD;;AA2BA,QAAMG,aAAa,GAAG,YAAW;AAC/B,QAAIV,MAAM,CAACf,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AAC3B,UAAI;AACJ,cAAM0B,cAAc,GAAG,MAAM5B,oBAAoB,CAACa,oBAArB,CAA0CC,OAA1C,CAC5Be,OAD4B,CAE3BnC,wBAF2B,EAG3BM,oBAAoB,CAAC8B,YAArB,CAAkCC,KAAlC,CAAwCC,KAAxC,CACEC,MAAM,CAAC/B,WAAD,CADR,EAEE,OAFF,CAH2B,EAQ5BgC,IAR4B,CAQvB;AACJC,UAAAA,IAAI,EAAEnC,oBAAoB,CAACe,eADvB;AAEJqB,UAAAA,EAAE,EAAE5C;AAFA,SARuB,CAA7B;AAaAiC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,cAAhC;AAEAjB,QAAAA,YAAY;AACZb,QAAAA,cAAc;AAChBD,QAAAA,cAAc;AACb,OAnBC,CAmBA,OAAO2B,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C;AACD;AACA;AACF,GAzBD;;AA2BA,QAAMa,UAAU,GAAG,YAAW;AAC5BZ,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCY,UAAU,CAACjC,SAAS,CAACkC,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAAjD;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCT,MAAM,CAACV,QAAD,CAA5C;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCY,UAAU,CAACjC,SAAS,CAACkC,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAAV,IAAkDtB,MAAM,CAACV,QAAD,CAA/F;;AACA,QAAI+B,UAAU,CAACjC,SAAS,CAACkC,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAAV,GAAiD,CAAjD,IAAsDtB,MAAM,CAACV,QAAD,CAAN,GAAmB,CAAzE,IAA+E+B,UAAU,CAACjC,SAAS,CAACkC,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAAV,IAAkDtB,MAAM,CAACV,QAAD,CAA3I,EAAuJ;AACrJ,UAAI;AACFkB,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACF,cAAMc,WAAW,GAAG,MAAMxC,oBAAoB,CAACyC,yBAArB,CAA+C3B,OAA/C,CACzB4B,cADyB,CAExB1C,oBAAoB,CAAC8B,YAArB,CAAkCC,KAAlC,CAAwCC,KAAxC,CACEC,MAAM,CAAC1B,QAAD,CADR,EAEE,OAFF,CAFwB,EAMxBE,gBANwB,EAQzByB,IARyB,CAQpB;AACJS,UAAAA,KAAK,EAAG3C,oBAAoB,CAAC8B,YAArB,CAAkCC,KAAlC,CAAwCC,KAAxC,CACNC,MAAM,CAAC,IAAD,CADA,EAEN,OAFM,CADJ;AAKJE,UAAAA,IAAI,EAAEnC,oBAAoB,CAACe,eALvB;AAMJqB,UAAAA,EAAE,EAAE1C;AANA,SARoB,CAA1B;AAiBA+B,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bc,WAA7B;AAEA7B,QAAAA,YAAY;AACZb,QAAAA,cAAc;AACdD,QAAAA,cAAc;AACf,OAxBC,CAwBA,OAAO2B,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,GAA5C;AACD;AACA;AAEF,GAlCD;;AAoCA5C,EAAAA,KAAK,CAACgE,SAAN,CAAgB,MAAM;AACpB,QACE5C,oBAAoB,CAACa,oBAArB,IACAb,oBAAoB,CAAC6C,oBADrB,IAEA7C,oBAAoB,CAACyC,yBAHvB,EAIE;AACA9B,MAAAA,YAAY;AACZb,MAAAA,cAAc;AACdD,MAAAA,cAAc;AACf;AACF,GAVD,EAUG,CAACG,oBAAoB,CAACa,oBAAtB,EACDb,oBAAoB,CAAC6C,oBADpB,EAED7C,oBAAoB,CAACyC,yBAFpB,CAVH;AAeAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BrB,SAA3B;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B3B,WAA7B;AACA0B,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B9B,WAA7B;AAEE,sBACK,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,WAAD;AACI,IAAA,eAAe,EAAEI,oBAAoB,CAACe,eAD1C;AAEI,IAAA,WAAW,EAAEb,WAFjB;AAGI,IAAA,cAAc,EAAEC,cAHpB;AAII,IAAA,aAAa,EAAEwB,aAJnB;AAKI,IAAA,SAAS,EAAEtB,SALf;AAMI,IAAA,WAAW,EAAEN,WANjB;AAOI,IAAA,WAAW,EAAEH,WAPjB;AAQI,IAAA,QAAQ,EAAEW,QARd;AASI,IAAA,WAAW,EAAEC,WATjB;AAUI,IAAA,gBAAgB,EAAEC,gBAVtB;AAWI,IAAA,mBAAmB,EAAEC,mBAXzB;AAYI,IAAA,UAAU,EAAE2B,UAZhB,CAaI;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAgBD,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBC,CADH,CADL;AA2BP;;AAED,MAAMS,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,UAAU,EAAED,KAAK,CAACC,UADc;AAEhCC,EAAAA,SAAS,EAACF,KAAK,CAACC,UAAN,CAAiBC,SAFK;AAGhCC,EAAAA,kBAAkB,EAACH,KAAK,CAACC,UAAN,CAAiBjE,aAHJ;AAIhCoE,EAAAA,gBAAgB,EAACJ,KAAK,CAACK,YAAN,CAAmBD;AAJJ,CAAL,CAA7B;;AAOA,eAAehE,OAAO,CAAC2D,eAAD,EAAkB;AACtChE,EAAAA,KADsC;AAEtCC,EAAAA,aAFsC;AAGtCE,EAAAA,YAHsC;AAItCC,EAAAA,gBAJsC;AAKtCF,EAAAA;AALsC,CAAlB,CAAP,CAMXW,OANW,CAAf","sourcesContent":["import React from \"react\"\nimport LoginView from \"../Views/HomeView\"\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'\n// import { ReCaptcha } from 'react-recaptcha-v3'\nimport FarmingView from \"../Views/FarmingView\"\nimport Footer from \"../Components/Footer/Index.js\"\n\nimport MetamaskContext from '../contexts/metamask';\n\nimport {\n  fessContractAddress,\n  fnirContractAddress,\n  liquidityContractAddress,\n} from '../utils/config';\n\nfunction Farming ({fnirBalance, getFnirBalance, getFessBalance, fessBalance  }){\n      const metamaskContextValue = React.useContext(MetamaskContext);\n\n      const [userApprove, setUserApprove] = React.useState(0);\n\n      const [allowance, setAllowance] = React.useState(0);\n\n      const [userSwap, setUserSwap] = React.useState(0);\n\n      const [referredEthereum, setReferredEthereum] = React.useState(\"0x0000000000000000000000000000000000000000\");\n\n      const getAllowance = async () => {\n        try {\n          const allowanceValue = await metamaskContextValue.fessContractInstance.methods\n            .allowance(\n              metamaskContextValue.ethereumAddress,\n              liquidityContractAddress,\n            )\n            .call();\n\n            setAllowance((\n              Number(allowanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n\n            setUserSwap((\n              Number(allowanceValue) / Math.pow(10, 18)\n            ).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 4,\n            }))\n        } catch (err) {\n          console.log('Farming -> getAllowance: err: ', err);\n        }\n      }\n\n      const handleApprove = async() => {\n        if (Number(userApprove) > 0) {\n          try {\n          const approveRequest = await metamaskContextValue.fessContractInstance.methods\n          .approve(\n            liquidityContractAddress,\n            metamaskContextValue.web3Instance.utils.toWei(\n              String(userApprove),\n              'ether',\n            ),\n          )\n          .send({\n            from: metamaskContextValue.ethereumAddress,\n            to: fessContractAddress,\n          });\n\n          console.log('approveRequest: ', approveRequest)\n\n          getAllowance();\n          getFessBalance();\n        getFnirBalance();\n        } catch (err) {\n          console.log('Farming -> handleApprove: err: ', err);\n        }\n        }\n      }\n\n      const handleSwap = async() => {\n        console.log('handleSwap: allowance: ', parseFloat(allowance.replace(/[^0-9-.]/g, '')));\n        console.log('handleSwap: userSwap: ', Number(userSwap));\n        console.log('allowance >= userSwap: ', parseFloat(allowance.replace(/[^0-9-.]/g, '')) >= Number(userSwap))\n        if (parseFloat(allowance.replace(/[^0-9-.]/g, '')) > 0 && Number(userSwap) > 0  && parseFloat(allowance.replace(/[^0-9-.]/g, '')) >= Number(userSwap)) {\n          try {\n            console.log('handleSwap is called successfully');\n          const swapRequest = await metamaskContextValue.liquidityContractInstance.methods\n          .swapFessTokens(\n            metamaskContextValue.web3Instance.utils.toWei(\n              String(userSwap),\n              'ether',\n            ),\n            referredEthereum\n          )\n          .send({\n            value:  metamaskContextValue.web3Instance.utils.toWei(\n              String(0.51),\n              'ether',\n            ),\n            from: metamaskContextValue.ethereumAddress,\n            to: liquidityContractAddress,\n          });\n\n          console.log('swapRequest: ', swapRequest)\n\n          getAllowance();\n          getFessBalance();\n          getFnirBalance();\n        } catch (err) {\n          console.log('Farming -> handleSwap: err: ', err);\n        }\n        }\n\n      }\n\n      React.useEffect(() => {\n        if (\n          metamaskContextValue.fessContractInstance &&\n          metamaskContextValue.fnirContractInstance &&\n          metamaskContextValue.liquidityContractInstance\n        ) {\n          getAllowance();\n          getFessBalance();\n          getFnirBalance();\n        }\n      }, [metamaskContextValue.fessContractInstance,\n        metamaskContextValue.fnirContractInstance,\n        metamaskContextValue.liquidityContractInstance])\n\n\n      console.log('allowance: ', allowance)\n      console.log('fessBalance: ', fessBalance)\n      console.log('fnirBalance: ', fnirBalance)\n\n        return (\n             <React.Fragment>\n                <div >\n                <FarmingView\n                    ethereumAddress={metamaskContextValue.ethereumAddress}\n                    userApprove={userApprove}\n                    setUserApprove={setUserApprove}\n                    handleApprove={handleApprove}\n                    allowance={allowance}\n                    fessBalance={fessBalance}\n                    fnirBalance={fnirBalance}\n                    userSwap={userSwap}\n                    setUserSwap={setUserSwap}\n                    referredEthereum={referredEthereum}\n                    setReferredEthereum={setReferredEthereum}\n                    handleSwap={handleSwap}\n                    // global_error = {props.global_error}\n                  />\n               <Footer />\n                  {/* <Notif\n                     global_error = {props.global_error}\n                     global_error_ret = {props.global_error_ret}\n                     global_error_clr = {props.global_error_clr}\n                  /> */}\n                </div>\n             </React.Fragment>\n        )\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Farming)"]},"metadata":{},"sourceType":"module"}