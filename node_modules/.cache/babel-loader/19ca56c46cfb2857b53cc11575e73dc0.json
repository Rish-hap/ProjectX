{"ast":null,"code":"var _jsxFileName = \"/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js\";\nimport React from \"react\";\nimport LoginView from \"../Views/HomeView\";\nimport { login, login_loading } from \"../actions/Auth\";\nimport { set_user_data } from \"../actions/user\";\nimport { global_error, global_error_clr } from \"../actions/global\";\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'; // import { ReCaptcha } from 'react-recaptcha-v3'\n\nimport Header from \"../Components/Header\";\nimport FarmingView from \"../Views/FarmingView\";\nimport Footer from \"../Components/Footer/Index.js\";\nimport MetamaskContext from '../../contexts/metamask';\n\nclass Farming extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.update_data = data => {\n      this.setState({\n        data\n      });\n    };\n\n    this.state = {\n      valid: false\n    };\n    this.recaptcha = \"\";\n  } // verifyCallback = (recaptchaToken) => {\n  //   // Here you will get the final recaptchaToken!!!\n  //   console.log(recaptchaToken, \"<= your recaptcha token\")\n  //   this.setState({\n  //     recaptchaToken:recaptchaToken\n  //   })\n  // }\n  // execute_captcha = (data)=> {\n  //    this.recaptcha.execute();\n  //    console.log(this.state.data,\"this.state.data\")\n  // }\n\n\n  render() {\n    console.log(this.props.global_error_ret, \"this.props.globalErrorRet in Container\");\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      ethereumAddress: metamaskContextValue.ethereumAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FarmingView, {\n      global_error: this.props.global_error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(Notif, {\n      global_error: this.props.global_error,\n      global_error_ret: this.props.global_error_ret,\n      global_error_clr: this.props.global_error_clr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret: state.auth_store.login_ret,\n  login_loading_flag: state.auth_store.login_loading,\n  global_error_ret: state.global_store.global_error_ret\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n})(Farming);","map":{"version":3,"sources":["/home/ajoncode/Rish-hap/ProjectX/src/Containers/Farming.js"],"names":["React","LoginView","login","login_loading","set_user_data","global_error","global_error_clr","connect","Notif","Header","FarmingView","Footer","MetamaskContext","Farming","PureComponent","constructor","props","update_data","data","setState","state","valid","recaptcha","render","console","log","global_error_ret","metamaskContextValue","ethereumAddress","mapStateToProps","auth_store","login_ret","login_loading_flag","global_store"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,mBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,OAAOC,eAAP,MAA4B,yBAA5B;;AAEA,MAAMC,OAAN,SAAsBb,KAAK,CAACc,aAA5B,CAA0C;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAsBlBC,WAtBkB,GAsBHC,IAAD,IAAS;AACrB,WAAKC,QAAL,CAAc;AACZD,QAAAA;AADY,OAAd;AAGD,KA1BiB;;AAEd,SAAKE,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC;AADG,KAAb;AAGA,SAAKC,SAAL,GAAiB,EAAjB;AACH,GAPiC,CASlC;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAQJC,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWU,gBAAvB,EAAwC,wCAAxC;AACE,wBACK,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,eAAe,EAAEC,oBAAoB,CAACC,eAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEE,oBAAC,WAAD;AAGE,MAAA,YAAY,EAAI,KAAKZ,KAAL,CAAWX,YAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAOD,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPC,eAQE,oBAAC,KAAD;AACG,MAAA,YAAY,EAAI,KAAKW,KAAL,CAAWX,YAD9B;AAEG,MAAA,gBAAgB,EAAI,KAAKW,KAAL,CAAWU,gBAFlC;AAGG,MAAA,gBAAgB,EAAI,KAAKV,KAAL,CAAWV,gBAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADH,CADL;AAkBH;;AAjDqC;;AAoD1C,MAAMuB,eAAe,GAAGT,KAAK,KAAK;AAChCU,EAAAA,UAAU,EAAEV,KAAK,CAACU,UADc;AAEhCC,EAAAA,SAAS,EAACX,KAAK,CAACU,UAAN,CAAiBC,SAFK;AAGhCC,EAAAA,kBAAkB,EAACZ,KAAK,CAACU,UAAN,CAAiB3B,aAHJ;AAIhCuB,EAAAA,gBAAgB,EAACN,KAAK,CAACa,YAAN,CAAmBP;AAJJ,CAAL,CAA7B;;AAOA,eAAenB,OAAO,CAACsB,eAAD,EAAkB;AACtC3B,EAAAA,KADsC;AAEtCC,EAAAA,aAFsC;AAGtCE,EAAAA,YAHsC;AAItCC,EAAAA,gBAJsC;AAKtCF,EAAAA;AALsC,CAAlB,CAAP,CAMXS,OANW,CAAf","sourcesContent":["import React from \"react\"\nimport LoginView from \"../Views/HomeView\"\nimport { login, login_loading } from \"../actions/Auth\"\nimport { set_user_data } from \"../actions/user\"\nimport { global_error, global_error_clr } from \"../actions/global\"\nimport { connect } from 'react-redux';\nimport Notif from '../Components/Notif'\n// import { ReCaptcha } from 'react-recaptcha-v3'\nimport Header from \"../Components/Header\"\nimport FarmingView from \"../Views/FarmingView\"\nimport Footer from \"../Components/Footer/Index.js\"\n\nimport MetamaskContext from '../../contexts/metamask';\n\nclass Farming extends React.PureComponent {\n        constructor(props){\n            super(props)\n            this.state = {\n                valid:false\n            }\n            this.recaptcha = \"\"\n        }\n\n        // verifyCallback = (recaptchaToken) => {\n        //   // Here you will get the final recaptchaToken!!!\n        //   console.log(recaptchaToken, \"<= your recaptcha token\")\n        //   this.setState({\n        //     recaptchaToken:recaptchaToken\n        //   })\n        // }\n\n\n        // execute_captcha = (data)=> {\n        //    this.recaptcha.execute();\n        //    console.log(this.state.data,\"this.state.data\")\n        // }\n\n        update_data = (data) =>{\n          this.setState({\n            data\n          })\n        }\n\n    render(){\n      console.log(this.props.global_error_ret,\"this.props.globalErrorRet in Container\")\n        return (\n             <React.Fragment>\n                <div >\n                <Header ethereumAddress={metamaskContextValue.ethereumAddress} />\n                  <FarmingView\n\n\n                    global_error = {this.props.global_error}\n                  />\n               <Footer />\n                  <Notif\n                     global_error = {this.props.global_error}\n                     global_error_ret = {this.props.global_error_ret}\n                     global_error_clr = {this.props.global_error_clr}\n                  />\n                </div>\n             </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n  auth_store: state.auth_store,\n  login_ret:state.auth_store.login_ret,\n  login_loading_flag:state.auth_store.login_loading,\n  global_error_ret:state.global_store.global_error_ret\n})\n\nexport default connect(mapStateToProps, {\n  login,\n  login_loading,\n  global_error,\n  global_error_clr,\n  set_user_data\n })(Farming)\n"]},"metadata":{},"sourceType":"module"}